# -*- coding: utf-8 -*-
"""8-puzzleSolver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1v7edxdvfdx2m2anaG1ZlVlQYgUTM9KHD
"""

from collections import deque

def get_possible_moves(state):
    possible_moves = []
    blank_index = state.index(0)
    if blank_index % 3 != 0:
        possible_moves.append(blank_index - 1)  # Left
    if blank_index % 3 != 2:
        possible_moves.append(blank_index + 1)  # Right
    if blank_index >= 3:
        possible_moves.append(blank_index - 3)  # Up
    if blank_index < 6:
        possible_moves.append(blank_index + 3)  # Down
    return possible_moves

def perform_move(state, move_index):
    new_state = state[:]
    blank_index = new_state.index(0)
    new_state[move_index], new_state[blank_index] = new_state[blank_index], new_state[move_index]
    return new_state

def state_to_string(state):
    return '\n'.join([str(state[i:i+3]) for i in range(0, 9, 3)])

def solve_8_puzzle(initial_state, goal_state):
    queue = deque([(initial_state, [])])
    visited = set()

    while queue:
        current_state, path = queue.popleft()
        if current_state == goal_state:
            return path

        visited.add(tuple(current_state))
        possible_moves = get_possible_moves(current_state)

        for move in possible_moves:
            new_state = perform_move(current_state, move)
            if tuple(new_state) not in visited:
                new_path = path + [new_state]
                queue.append((new_state, new_path))
                visited.add(tuple(new_state))

    return None

if __name__ == "__main__":
    initial_state = [1, 2, 3, 4, 5, 6, 0, 7, 8]  # Replace this with your initial state
    goal_state = [1, 2, 3, 4, 5, 6, 7, 8, 0]  # Replace this with your goal state

    solution = solve_8_puzzle(initial_state, goal_state)
    if solution:
        print("Solution steps:")
        for step, state in enumerate(solution):
            print(f"Step {step}:")
            print(state_to_string(state))
    else:
        print("No solution found for the given initial state.")